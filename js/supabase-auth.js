// ===============================
// Supabase Auth - Cria√ß√£o de Termo (vers√£o final com persist√™ncia)
// ===============================

const SUPABASE_URL = 'https://qoqtnwobjfmpmsealfbs.supabase.co';
const SUPABASE_ANON_KEY =
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFvcXRud29iamZtcG1zZWFsZmJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE1NzUzNTAsImV4cCI6MjA3NzE1MTM1MH0.3gW_CC5dcm-hPl6VkL1gAN_zLY9qGPTMHKseM9SYnx4';

let supabase;

// -------------------------------
// üöÄ Inicializa√ß√£o imediata com persist√™ncia de sess√£o
// -------------------------------
if (window.supabase && window.supabase.createClient) {
  supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
    auth: {
      persistSession: true,       // Mant√©m o usu√°rio logado entre reloads
      autoRefreshToken: true,     // Atualiza o token automaticamente
      detectSessionInUrl: true    // Suporte a login via link m√°gico
    }
  });
  console.log('‚úÖ Cliente Supabase inicializado com sucesso.');
} else {
  console.error('‚ùå Supabase ainda n√£o foi carregado. Verifique a tag <script> da biblioteca.');
}

// -------------------------------
// üîç Verifica se o e-mail √© permitido
// -------------------------------
async function isAllowedEmail(email) {
  if (!email.endsWith('@omeletecompany.com')) {
    console.warn('Dom√≠nio inv√°lido:', email);
    return false;
  }

  const { data, error } = await supabase
    .from('allowed_emails')
    .select('email')
    .eq('email', email)
    .limit(1);

  if (error) {
    console.error('Erro ao consultar allowed_emails:', error);
    return false;
  }

  return data && data.length === 1;
}

// -------------------------------
// üßæ Registro com e-mail e senha
// -------------------------------
async function signUpWithEmail(email, password) {
  if (!supabase) throw new Error('Supabase ainda n√£o foi inicializado.');
  if (!email.endsWith('@omeletecompany.com')) {
    throw new Error('Somente e-mails @omeletecompany.com s√£o permitidos.');
  }

  const permitido = await isAllowedEmail(email);
  if (!permitido) {
    throw new Error('E-mail n√£o autorizado. Contate o administrador.');
  }

  const { data, error } = await supabase.auth.signUp({ email, password });
  if (error) throw new Error(error.message);
  return data;
}

// -------------------------------
// ‚úâÔ∏è Login com e-mail e senha
// -------------------------------
async function signInWithEmail(email, password) {
  if (!supabase) throw new Error('Supabase ainda n√£o foi inicializado.');
  if (!email.endsWith('@omeletecompany.com')) {
    throw new Error('Somente e-mails @omeletecompany.com s√£o permitidos.');
  }

  const permitido = await isAllowedEmail(email);
  if (!permitido) {
    throw new Error('E-mail n√£o autorizado. Contate o administrador.');
  }

  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password
  });

  if (error) throw new Error(error.message);
  return data;
}

// -------------------------------
// üîó Login via link m√°gico (sem senha)
// -------------------------------
async function sendMagicLink(email) {
  if (!supabase) throw new Error('Supabase ainda n√£o foi inicializado.');
  if (!email.endsWith('@omeletecompany.com')) {
    throw new Error('Somente e-mails @omeletecompany.com s√£o permitidos.');
  }

  const permitido = await isAllowedEmail(email);
  if (!permitido) {
    throw new Error('E-mail n√£o autorizado. Contate o administrador.');
  }

  const { error } = await supabase.auth.signInWithOtp({ email });
  if (error) throw new Error(error.message);
  return true;
}

// -------------------------------
// üßç Obter usu√°rio logado (com sess√£o persistente)
// -------------------------------
async function currentUser() {
  if (!supabase) {
    console.warn('Supabase ainda n√£o foi inicializado.');
    return null;
  }

  // Tenta recuperar sess√£o persistida
  const { data: { session }, error: sessionError } = await supabase.auth.getSession();

  if (sessionError) {
    console.error('Erro ao recuperar sess√£o:', sessionError);
  }

  if (!session) {
    console.warn('‚ÑπÔ∏è Nenhum usu√°rio logado no momento.');
    return null;
  }

  // Obt√©m dados completos do usu√°rio
  const { data, error } = await supabase.auth.getUser();
  if (error) {
    if (error.message.includes('Auth session missing')) {
      console.warn('‚ÑπÔ∏è Sess√£o expirada ou inexistente.');
      return null;
    }
    console.error('‚ùå Erro ao obter usu√°rio atual:', error);
    return null;
  }

  return data?.user ?? null;
}

// -------------------------------
// üö™ Logout
// -------------------------------
async function signOut() {
  if (!supabase) throw new Error('Supabase ainda n√£o foi inicializado.');
  const { error } = await supabase.auth.signOut();
  if (error) console.error('Erro ao sair:', error);
  else console.log('üëã Usu√°rio desconectado com sucesso.');
}

// -------------------------------
// üåê Exporta as fun√ß√µes globalmente
// -------------------------------
window.authSupabase = {
  signUpWithEmail,
  signInWithEmail,
  sendMagicLink,
  currentUser,
  signOut
};
